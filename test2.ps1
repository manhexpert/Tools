IyBMb2FkIHJlcXVpcmVkIGFzc2VtYmxpZXMKW3ZvaWRdIFtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoIlN5c3RlbS5XaW5kb3dzLkZvcm1zIikKCiMgVmFyaWFibGVzCiRSQkNNX2xvZ19QYXRoICAgICAgPSAiJGVudjpQcm9ncmFtRGF0YVxCb3NjaFxSQmNtXExvZ3NccGFja2FnZXNcIgokUkJDTV9jZmdfUGF0aCAgICAgID0gIiRlbnY6UHJvZ3JhbURhdGFcQm9zY2hcUkJjbVxjb25maWdcIgokR1VJRHg2NCAgICAgICAgICAgID0gIkhLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFVuaW5zdGFsbFwiCiRHVUlEWDg2ICAgICAgICAgICAgPSAiSEtMTTpcU09GVFdBUkVcV09XNjQzMk5vZGVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cVW5pbnN0YWxsXCIKJFNvdXJjZV9QYWNrYWdlUGF0aCA9ICJcXHNpMHZtMTM4NC5kZS5ib3NjaC5jb21ccmJjbSRcIgokRmluZ2VQcmludF9QYXRoICAgID0gIkhLTE06XFNPRlRXQVJFXEJPU0NIXFJCY21ccGFja2FnZXNcIgokUE1JICAgICAgICAgICAgICAgID0gIkhLTE06XFNPRlRXQVJFXEJPU0NIXFJCY21cUE1JXENsaWVudFxFbnZpcm9ubWVudCIKJERhdGVuICAgICAgICAgICAgICA9ICIkZW52OlN5c3RlbURyaXZlXGRhdGVuXCIKJEFjdGl2ZV9TZXR1cF9IS0xNICA9ICJIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcQWN0aXZlIFNldHVwXEluc3RhbGxlZCBDb21wb25lbnRzXCIKJEFjdGl2ZV9TZXR1cF9IS0NVICA9ICJIS0NVOlxTT0ZUV0FSRVxNaWNyb3NvZnRcQWN0aXZlIFNldHVwXEluc3RhbGxlZCBDb21wb25lbnRzIgokUmVnaXN0cnlfRmlyZXdhbGwgID0gIkhLTE06XFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxTZXJ2aWNlc1xTaGFyZWRBY2Nlc3NcUGFyYW1ldGVyc1xGaXJld2FsbFBvbGljeVxGaXJld2FsbFJ1bGVzIgoKIyBDcmVhdGUgZm9ybQokZm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQokZm9ybS5UZXh0ID0gIlRvb2wgVGVzdCBwYWNrYWdlIgokZm9ybS5BdXRvU2l6ZSA9ICR0cnVlCiRmb3JtLlN0YXJ0UG9zaXRpb24gPSAiQ2VudGVyU2NyZWVuIgokZm9ybS5NYXhpbWl6ZUJveCA9ICRmYWxzZQokZm9ybS5Gb3JtQm9yZGVyU3R5bGUgPSAiRml4ZWRTaW5nbGUiCiRmb3JtLlBhZGRpbmcgPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlBhZGRpbmcoMTUsIDE1LCAxNSwgMTUpCgojIENyZWF0ZSBsYWJlbAokcmJjbWxhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbAokcmJjbWxhYmVsLkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Qb2ludCgyMCwgMjApCiRyYmNtbGFiZWwuU2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMDAsIDIwKQokcmJjbWxhYmVsLlRleHQgPSAiUkJDTSBOdW1iZXI6IgokZm9ybS5Db250cm9scy5BZGQoJHJiY21sYWJlbCkKCiMgQ3JlYXRlIHRleHQgYm94CiR0ZXh0cmJjbSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuVGV4dEJveAokdGV4dHJiY20uTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlBvaW50KDE1MCwgMjApCiR0ZXh0cmJjbS5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDEwMCwgMjApCiRmb3JtLkNvbnRyb2xzLkFkZCgkdGV4dHJiY20pCiR0ZXh0cmJjbS5BZGRfVGV4dENoYW5nZWQoewogICAgJGdsb2JhbDpSQkNNID0gJHRleHRyYmNtLlRleHQKICAgICRnbG9iYWw6UkJDTV9sb2cgPSAiJFJCQ01fbG9nX1BhdGhgUkJDTSRSQkNNIgogICAgJGdsb2JhbDpSQkNNX2NmZyA9ICIkUkJDTV9jZmdfUGF0aGBSQkNNJFJCQ00iCiAgICAkZ2xvYmFsOlNvdXJjZV9QYWNrYWdlID0gIiRTb3VyY2VfUGFja2FnZVBhdGhgUkJDTSRSQkNNIgogICAgJGdsb2JhbDpGaW5nZVByaW50ID0gIiRGaW5nZVByaW50X1BhdGhgUkJDTSRSQkNNIgp9KQoKI2Z1bmN0aW9uCkZ1bmN0aW9uIE9wZW5SZWdpc3RyeSAoW3N0cmluZ10kUmVzUGF0aCkKewogICAgJHJlZ1BhdGggPSAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cQXBwbGV0c1xSZWdlZGl0IgogICAgJG5hbWUgPSAiTGFzdEtleSIKICAgICR2YWx1ZSA9ICJDb21wdXRlclwiKyhDb252ZXJ0LVBhdGggKCRSZXNQYXRoKSkKCiAgICBOZXctSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICRuYW1lIC1WYWx1ZSAkdmFsdWUgLVByb3BlcnR5VHlwZSBTdHJpbmcgLUZvcmNlIHwgT3V0LU51bGwKICAgIFN0YXJ0LVByb2Nlc3MgUmVnRWRpdAp9CgpGdW5jdGlvbiBDcmVhdGUtQnV0dG9uIHsKICAgIHBhcmFtKAogICAgICAgIFtTeXN0ZW0uRHJhd2luZy5Qb2ludF0kTG9jYXRpb24sCiAgICAgICAgW1N5c3RlbS5EcmF3aW5nLlNpemVdJFNpemUsCiAgICAgICAgW3N0cmluZ10kVGV4dCwKICAgICAgICBbU2NyaXB0QmxvY2tdJEFjdGlvbgogICAgKQoKICAgICRidXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbgogICAgJGJ1dHRvbi5Mb2NhdGlvbiA9ICRMb2NhdGlvbgogICAgJGJ1dHRvbi5TaXplID0gJFNpemUKICAgICRidXR0b24uVGV4dCA9ICRUZXh0CiAgICAkYnV0dG9uLkFkZF9DbGljaygkQWN0aW9uKQoKICAgIHJldHVybiAkYnV0dG9uCn0KRnVuY3Rpb24gQ29weURhdGEoW3N0cmluZ10kRnJvbSxbc3RyaW5nXSRUbykKewojIENyZWF0ZSBjaGVjayBib3ggYW5kIHNjcm9sbAojJHNvdXJjZUZvbGRlciA9ICRGcm9tCiMkZGVzdGluYXRpb25Gb2xkZXIgPSAkVG8KCiRzb3VyY2VGb2xkZXIgPSAiQzpcVXNlcnNcTk1BOUhDXERlc2t0b3BcQ2FMaUxpXzFfMDVfTWFuaCIKJGRlc3RpbmF0aW9uRm9sZGVyID0gIkM6XFVzZXJzXE5NQTlIQ1xEZXNrdG9wXE5ldyBmb2xkZXIiCgokc3ViRm9sZGVycyA9IEdldC1DaGlsZEl0ZW0gLVBhdGggJHNvdXJjZUZvbGRlciAtRGlyZWN0b3J5CgojIENyZWF0ZSBjaGVja2JveCB0byBzZWxlY3QgZm9sZGVyCiRzY3JvbGxCb3ggPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLlBhbmVsCiRzY3JvbGxCb3guV2lkdGggPSAyNzAKJHNjcm9sbEJveC5IZWlnaHQgPSAyODAKJHNjcm9sbEJveC5BdXRvU2Nyb2xsID0gJHRydWUKCiR4ID0gMTAKJHkgPSAxMAokY2hlY2tCb3hlcyA9IEAoKQoKZm9yZWFjaCAoJHN1YkZvbGRlciBpbiAkc3ViRm9sZGVycykgewogICAgJGNoZWNrQm94ID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5DaGVja0JveAogICAgJGNoZWNrQm94LlRleHQgPSAkc3ViRm9sZGVyLk5hbWUKICAgICRjaGVja0JveC5BdXRvU2l6ZSA9ICR0cnVlCiAgICAkY2hlY2tCb3guTG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlBvaW50KCR4LCAkeSkKICAgICRzY3JvbGxCb3guQ29udHJvbHMuQWRkKCRjaGVja0JveCkKICAgICRjaGVja0JveGVzICs9ICRjaGVja0JveAogICAgJHkgKz0gMjUgIyAyNSBwaXhlbHMgYXBhcnQKfQoKIyBDcmVhdGUgZGlhbG9nIGJveAokZm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQokZm9ybS5UZXh0ID0gIlNlbGVjdCBGb2xkZXJzIHRvIENvcHkiCiRmb3JtLldpZHRoID0gMzAwCiRmb3JtLkhlaWdodCA9IDQwMAokRm9ybS5TdGFydFBvc2l0aW9uID0gIkNlbnRlclBhcmVudCIKCiRva0J1dHRvbiA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuQnV0dG9uCiRva0J1dHRvbi5UZXh0ID0gIk9LIgokb2tCdXR0b24uRGlhbG9nUmVzdWx0ID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkRpYWxvZ1Jlc3VsdF06Ok9LCiRva0J1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoNjAsIDMwMCkKJG9rQnV0dG9uLkFuY2hvciA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5BbmNob3JTdHlsZXNdOjpCb3R0b20gLWJvciBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQW5jaG9yU3R5bGVzXTo6TGVmdAokZm9ybS5BY2NlcHRCdXR0b24gPSAkb2tCdXR0b24KJGZvcm0uQ29udHJvbHMuQWRkKCRva0J1dHRvbikKCiRjYW5jZWxCdXR0b24gPSBOZXctT2JqZWN0IFN5c3RlbS5XaW5kb3dzLkZvcm1zLkJ1dHRvbgokY2FuY2VsQnV0dG9uLlRleHQgPSAiQ2FuY2VsIgokY2FuY2VsQnV0dG9uLkRpYWxvZ1Jlc3VsdCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5EaWFsb2dSZXN1bHRdOjpDYW5jZWwKJGNhbmNlbEJ1dHRvbi5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoMTUwLDMwMCkKJGNhbmNlbEJ1dHRvbi5BbmNob3IgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQW5jaG9yU3R5bGVzXTo6Qm90dG9tIC1ib3IgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLkFuY2hvclN0eWxlc106OlJpZ2h0CiRmb3JtLkNhbmNlbEJ1dHRvbiA9ICRjYW5jZWxCdXR0b24KJGZvcm0uQ29udHJvbHMuQWRkKCRjYW5jZWxCdXR0b24pCgojIEFkZCBzY3JvbGwgYmFyIHRvIGRpYWxvZwokc2Nyb2xsQm94LkxvY2F0aW9uID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5Qb2ludCgxMCwgMTApCiRmb3JtLkNvbnRyb2xzLkFkZCgkc2Nyb2xsQm94KQoKJHJlc3VsdCA9ICRmb3JtLlNob3dEaWFsb2coKQoKIyBDb3B5IHNlbGVjdGVkIGZvbGRlcnMgaWYgdXNlciBzZWxlY3RzIE9LCmlmICgkcmVzdWx0IC1lcSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuRGlhbG9nUmVzdWx0XTo6T0spIHsKICAgIGZvcmVhY2ggKCRjaGVja0JveCBpbiAkY2hlY2tCb3hlcykgewogICAgICAgIGlmICgkY2hlY2tCb3guQ2hlY2tlZCkgCiAgICAgICAgewogICAgICAgICAgICAkc3ViRm9sZGVyTmFtZSA9ICRjaGVja0JveC5UZXh0CiAgICAgICAgICAgICRzb3VyY2VTdWJGb2xkZXIgPSAiJHNvdXJjZUZvbGRlclwkc3ViRm9sZGVyTmFtZSIKICAgICAgICAgICAgJG9ialNoZWxsID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0ICJTaGVsbC5BcHBsaWNhdGlvbiIKICAgICAgICAgICAgJG9iakZvbGRlciA9ICRvYmpTaGVsbC5OYW1lU3BhY2UoJGRlc3RpbmF0aW9uRm9sZGVyKSAKICAgICAgICAgICAgJG9iakZvbGRlci5Db3B5SGVyZSgkc291cmNlU3ViRm9sZGVyLDE2KQogICAgICAgIH0KICAgIH0KCgokZm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQokc2NyZWVuID0gW1N5c3RlbS5XaW5kb3dzLkZvcm1zLlNjcmVlbl06OkZyb21Db250cm9sKCRmb3JtKS5Xb3JraW5nQXJlYQokeCA9ICRzY3JlZW4uTGVmdCArICgoJHNjcmVlbi5XaWR0aCAtICRmb3JtLldpZHRoKSAvIDIpCiR5ID0gJHNjcmVlbi5Ub3AgKyAoKCRzY3JlZW4uSGVpZ2h0IC0gJGZvcm0uSGVpZ2h0KSAvIDIpCiRmb3JtLlN0YXJ0UG9zaXRpb24gPSAiTWFudWFsIgokZm9ybS5Mb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoJHgsICR5KQpbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveF06OlNob3coJGZvcm0sICJGb2xkZXJzIGNvcGllZCBzdWNjZXNzZnVsbHkiLCAiU3VjY2VzcyIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpJbmZvcm1hdGlvbiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hEZWZhdWx0QnV0dG9uXTo6QnV0dG9uMSwgJGZvcm0pCgoKfQoKfQpGdW5jdGlvbiBPcGVuRm9sZGVyKFtzdHJpbmddJFBhdGgpCnsKICAgIGlmIChUZXN0LVBhdGggLVBhdGggIiRQYXRoIiAtUGF0aFR5cGUgQW55KQogICAgewogICAgICAgIGV4cGxvcmVyICIkUGF0aCIKICAgIH0KICAgIEVsc2UKICAgIHsKICAgIFtTeXN0ZW0uUmVmbGVjdGlvbi5Bc3NlbWJseV06OkxvYWRXaXRoUGFydGlhbE5hbWUoIlN5c3RlbS5XaW5kb3dzLkZvcm1zIikKICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRm9sZGVyIG5vdCBmb3VuZCIsICJFcnJvciIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikKICAgIH0KCn0KCgojIENyZWF0ZSBidXR0b24gY29sdW0gMSBhbmQgYmluZCB0byBldmVudCBoYW5kbGVyCiRidXR0b25zID0gQCgKICAgIEB7IE5hbWUgPSAiUkJDTSBMT0ciOyBWYWx1ZSA9IHsgT3BlbkZvbGRlciAtUGF0aCAiJFJCQ01fTG9nIiB9IH0sCiAgICBAeyBOYW1lID0gIlJCQ00gQ29uZmlnIjsgVmFsdWUgPSB7IE9wZW5Gb2xkZXIgLVBhdGggIiRSQkNNX0NmZyIgfSB9LAogICAgQHsgTmFtZSA9ICJHVUlEeDY0IjsgVmFsdWUgPSB7IE9wZW5SZWdpc3RyeSAtUmVzUGF0aCAkR1VJRHg2NCB9IH0sCiAgICBAeyBOYW1lID0gIkdVSUR4ODYiOyBWYWx1ZSA9IHsgT3BlblJlZ2lzdHJ5IC1SZXNQYXRoICRHVUlEeDg2IH0gfSwKICAgIEB7IE5hbWUgPSAiU291cmNlIFBhY2thZ2UiOyBWYWx1ZSA9IHsgT3BlbkZvbGRlciAtUGF0aCAiJFNvdXJjZV9QYWNrYWdlIiB9IH0sCiAgICBAeyBOYW1lID0gIkZpbmdlUHJpbnQiOyBWYWx1ZSA9IHsgT3BlblJlZ2lzdHJ5IC1SZXNQYXRoICRGaW5nZVByaW50IH0gfSwKICAgIEB7IE5hbWUgPSAiUE1JIjsgVmFsdWUgPSB7IE9wZW5SZWdpc3RyeSAtUmVzUGF0aCAkUE1JIH0gfSwKICAgIEB7IE5hbWUgPSAiQ29weSB0byBkYXRlbiI7IFZhbHVlID0geyBDb3B5RGF0YSAtRnJvbSAkU291cmNlX1BhY2thZ2UgLVRvICREYXRlbn0gfQogICAgCikKJGk9MApmb3JlYWNoICgkYnV0dG9uIGluICRidXR0b25zKSAKewogICAgJFZlcnRpY2FsID0gODAgKyAkaSAqIDQwCiAgICAkbG9jYXRpb24gPSBOZXctT2JqZWN0IFN5c3RlbS5EcmF3aW5nLlBvaW50KDIwLCRWZXJ0aWNhbCApCiAgICAkc2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMDAsIDMwKQogICAgJG5hbWUgPSAkYnV0dG9uLk5hbWUKICAgICRBY3Rpb24gPSAkYnV0dG9uLlZhbHVlCiAgICAkYnV0dG9uID0gQ3JlYXRlLUJ1dHRvbiAtTG9jYXRpb24gJGxvY2F0aW9uIC1TaXplICRzaXplIC1UZXh0ICRuYW1lIC1BY3Rpb24gJEFjdGlvbgogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRidXR0b24pCiAgICAkaSsrCn0KCiMgQ3JlYXRlIGJ1dHRvbiBjb2x1bSAyIGFuZCBiaW5kIHRvIGV2ZW50IGhhbmRsZXIKJGJ1dHRvbnMgPSBAKAogICAgQHsgTmFtZSA9ICJBY3RpdmUgSEtMTSI7IFZhbHVlID0geyBPcGVuUmVnaXN0cnkgLVJlc1BhdGggJEFjdGl2ZV9TZXR1cF9IS0xNIH0gfSwKICAgIEB7IE5hbWUgPSAiQWN0aXZlIEhLQ1UiOyBWYWx1ZSA9IHsgT3BlblJlZ2lzdHJ5IC1SZXNQYXRoICRBY3RpdmVfU2V0dXBfSEtDVSB9IH0sCiAgICBAeyBOYW1lID0gIkZpcmUgd2FsbCI7IFZhbHVlID0geyBPcGVuUmVnaXN0cnkgLVJlc1BhdGggJFJlZ2lzdHJ5X0ZpcmV3YWxsIH0gfSwKICAgIEB7IE5hbWUgPSAiRW52IHZhcmlhYmxlIjsgVmFsdWUgPSB7IFN0YXJ0LVByb2Nlc3MgcnVuZGxsMzIgLUFyZ3VtZW50TGlzdCAic3lzZG0uY3BsLEVkaXRFbnZpcm9ubWVudFZhcmlhYmxlcyJ9IH0sCiAgICBAeyBOYW1lID0gIlNtc2NmZ3JjIjsgVmFsdWUgPSB7IGNtZCAvYyAiY29udHJvbCBzbXNjZmdyYyJ9IH0sCiAgICBAeyBOYW1lID0gIlRhc2sgc2NoZWR1bGVyIjsgVmFsdWUgPSB7IFN0YXJ0LVByb2Nlc3MgIkM6XFdpbmRvd3NcU3lzdGVtMzJcdGFza3NjaGQubXNjIiAtVmVyYiBSdW5BcyB9IH0sIAogICAgQHsgTmFtZSA9ICJDb250cm9sIHBhbmVsIjsgVmFsdWUgPSB7IGNvbnRyb2wgYXBwd2l6LmNwbH0gfSwKICAgIEB7IE5hbWUgPSAiU2VjdXJpdHkgcG9saWN5IjsgVmFsdWUgPSB7IFN0YXJ0LVByb2Nlc3MgIkM6XFdpbmRvd3NcU3lzdGVtMzJcc2VjcG9sLm1zYyIgLVZlcmIgUnVuQXN9IH0KKQokaT0wCmZvcmVhY2ggKCRidXR0b24gaW4gJGJ1dHRvbnMpIAp7CiAgICAkVmVydGljYWwgPSA4MCArICRpICogNDAKICAgICRsb2NhdGlvbiA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuUG9pbnQoMTUwLCRWZXJ0aWNhbCApCiAgICAkc2l6ZSA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuU2l6ZSgxMDAsIDMwKQogICAgJG5hbWUgPSAkYnV0dG9uLk5hbWUKICAgICRBY3Rpb24gPSAkYnV0dG9uLlZhbHVlCiAgICAkYnV0dG9uID0gQ3JlYXRlLUJ1dHRvbiAtTG9jYXRpb24gJGxvY2F0aW9uIC1TaXplICRzaXplIC1UZXh0ICRuYW1lIC1BY3Rpb24gJEFjdGlvbgogICAgJGZvcm0uQ29udHJvbHMuQWRkKCRidXR0b24pCiAgICAkaSsrCn0KCiMgU2hvdyBmb3JtCiRmb3JtLlNob3dEaWFsb2coKSB8IE91dC1OdWxsCg==




#new
